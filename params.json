{"name":"Flipadelphia","tagline":"Flipadelphia flips your features","body":"# Flipadelphia\r\n\r\n*Flipadelphia flips your features*\r\n\r\n[![Build Status](https://travis-ci.org/samdfonseca/flipadelphia.svg?branch=master)](https://travis-ci.org/samdfonseca/flipadelphia)\r\n\r\n<img src=\"http://i.imgur.com/28TTvje.gif\" alt=\"flipadelphia\"/>\r\n\r\n## Installation\r\n* Flipadelphia uses a config file to keep track of settings for runtime environments. By default, the file is expected\r\n    to be in the ~/.flipadelphia directory. You can also manually set the config with the -c/--config flag. An example\r\n    of the config file is in the config subpackage.\r\n* To handle dependencies, Flipadelphia uses the [godep](https://github.com/tools/godep) package manager. Godep\r\n    installs dependencies into the ```vendor``` directory within a project, and handles versioning of dependencies.\r\n\r\n```sh\r\n$ mkdir ~/.flipadelphia\r\n$ cp config/config.example.json ~/.flipadelphia/config.json\r\n$ make deps\r\n```\r\n\r\n## Building\r\n\r\n```sh\r\n$ make build\r\n```\r\n\r\n## Running\r\n```sh\r\n$ ./flipadelphia -h\r\nNAME:\r\n   flipadelphia - flipadelphia flips your features\r\n\r\nUSAGE:\r\n   flipadelphia [global options] command [command options] [arguments...]\r\n\r\nVERSION:\r\n   dev-build\r\n\r\nCOMMANDS:\r\n   sanitycheck, c       Run a quick sanity check (DEV PURPOSES ONLY)\r\n   serve, s             Start the Flipadelphia server\r\n   help, h              Shows a list of commands or help for one command\r\n\r\nGLOBAL OPTIONS:\r\n   --help, -h           show help\r\n   --version, -v        print the version\r\n\r\n\r\n$ ./flipadelphia serve -h\r\nNAME:\r\n   flipadelphia serve - Start the Flipadelphia server\r\n\r\nUSAGE:\r\n   flipadelphia serve [command options] [arguments...]\r\n\r\nOPTIONS:\r\n   --env, -e \"development\"      An environment from the config.json file to use [$FLIPADELPHIA_ENV]\r\n   --config \"config.json\"       Path to the config file. [$FLIPADELPHIA_CONFIG]\r\n```\r\n\r\n## Usage\r\n\r\n### Setting a feature\r\n\r\nAuth settings are defined in the config.json file for the runtime environment\r\n\r\n```sh\r\n$ curl -s -H \"X-SESSION-TOKEN:abc123\" -d '{\"scope\":\"user-1\",\"value\":\"on\"}' -X POST localhost:3006/features/feature1 | jq .\r\n{\r\n  \"name\": \"feature1\",\r\n  \"value\": \"on\",\r\n  \"data\": \"true\"\r\n}\r\n```\r\n\r\n### Checking a feature\r\n\r\nIf the feature has been set on the scope, ```data``` is ```true```.\r\n\r\n```sh\r\n$ curl -s localhost:3006/features/feature1?scope=user-1 | jq .\r\n{\r\n  \"name\": \"feature1\",\r\n  \"value\": \"on\",\r\n  \"data\": \"true\"\r\n}\r\n```\r\n\r\nIf the feature has never been set on the scope, ```data``` is ```false```.\r\n\r\n```sh\r\n$ curl -s localhost:3006/features/unset_feature?scope=user-1 | jq .\r\n{\r\n  \"name\": \"unset_feature\",\r\n  \"value\": \"\",\r\n  \"data\": \"false\"\r\n}\r\n```\r\n\r\n### Checking a scope\r\n\r\nGet all features set on a scope\r\n\r\n```sh\r\n$ curl -s localhost:3006/features?scope=user-1 | jq .\r\n[\r\n  \"feature1\"\r\n]\r\n```\r\n\r\nGet features set on a scope matching some value\r\n\r\n```sh\r\n$ curl -s localhost:3006/features?scope=user-1\\&value=off | jq .\r\n[]\r\n$ curl -s -d '{\"scope\":\"user-1\",\"value\":\"1\"}' -X POST localhost:3006/features/feature2 | jq .\r\n{\r\n  \"name\": \"feature2\",\r\n  \"value\": \"1\",\r\n  \"data\": \"true\"\r\n}\r\n$ curl -s localhost:3006/features?scope=user-1\\&value=1 | jq .\r\n[\r\n  \"feature2\"\r\n]\r\n```\r\n\r\n## Performance\r\n\r\n* Flipadelphia uses BoltDB as the persistence layer. BoltDB fits the nature of a feature flipping service because it's a read-optimized database and features are typically checked far more often than set.\r\n* To keep the response time as low as possible, all the check endpoints come without authorization. The thinking here is that theres no harm in someone checking a feature. If thats an issue, use a uuid for the feature and scope and keep a mapping of those externally. Authentication will be added to the set endpoint soon.\r\n\r\n```sh\r\n$ ab -n 10000 -c 20 localhost:3006/features/feature1?scope=user-1\r\nThis is ApacheBench, Version 2.3 <$Revision: 1663405 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking localhost (be patient)\r\nCompleted 1000 requests\r\nCompleted 2000 requests\r\nCompleted 3000 requests\r\nCompleted 4000 requests\r\nCompleted 5000 requests\r\nCompleted 6000 requests\r\nCompleted 7000 requests\r\nCompleted 8000 requests\r\nCompleted 9000 requests\r\nCompleted 10000 requests\r\nFinished 10000 requests\r\n\r\n\r\nServer Software:\r\nServer Hostname:        localhost\r\nServer Port:            3006\r\n\r\nDocument Path:          /features/feature1?scope=user-1\r\nDocument Length:        46 bytes\r\n\r\nConcurrency Level:      20\r\nTime taken for tests:   2.051 seconds\r\nComplete requests:      10000\r\nFailed requests:        0\r\nTotal transferred:      1630000 bytes\r\nHTML transferred:       460000 bytes\r\nRequests per second:    4875.25 [#/sec] (mean)\r\nTime per request:       4.102 [ms] (mean)\r\nTime per request:       0.205 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          776.04 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n            min  mean[+/-sd] median   max\r\nConnect:        0    2   5.7      2     154\r\nProcessing:     0    2   4.6      2     154\r\nWaiting:        0    2   3.8      2     153\r\nTotal:          1    4   7.3      4     155\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n50%      4\r\n66%      4\r\n75%      4\r\n80%      4\r\n90%      5\r\n95%      5\r\n98%      6\r\n99%      8\r\n100%    155 (longest request)\r\n\r\n\r\n$ ab -n 10000 -c 20 localhost:3006/features?scope=user-1\\&value=on\r\nThis is ApacheBench, Version 2.3 <$Revision: 1663405 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking localhost (be patient)\r\nCompleted 1000 requests\r\nCompleted 2000 requests\r\nCompleted 3000 requests\r\nCompleted 4000 requests\r\nCompleted 5000 requests\r\nCompleted 6000 requests\r\nCompleted 7000 requests\r\nCompleted 8000 requests\r\nCompleted 9000 requests\r\nCompleted 10000 requests\r\nFinished 10000 requests\r\n\r\n\r\nServer Software:\r\nServer Hostname:        localhost\r\nServer Port:            3006\r\n\r\nDocument Path:          /features?scope=user-1&value=on\r\nDocument Length:        34 bytes\r\n\r\nConcurrency Level:      20\r\nTime taken for tests:   1.538 seconds\r\nComplete requests:      10000\r\nFailed requests:        0\r\nTotal transferred:      1510000 bytes\r\nHTML transferred:       340000 bytes\r\nRequests per second:    6501.95 [#/sec] (mean)\r\nTime per request:       3.076 [ms] (mean)\r\nTime per request:       0.154 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          958.78 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        0    1   3.3      1     112\r\nProcessing:     1    2   3.7      1     112\r\nWaiting:        1    2   3.7      1     112\r\nTotal:          1    3   5.0      3     114\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%      3\r\n  66%      3\r\n  75%      3\r\n  80%      3\r\n  90%      3\r\n  95%      4\r\n  98%      4\r\n  99%      4\r\n 100%    114 (longest request)\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}